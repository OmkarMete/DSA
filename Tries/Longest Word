// Longest Word 

#include<iostream>
#include<vector>
#include<string>
#include<unordered_map>
using namespace std;

class Node {
public:
    unordered_map<char, Node*> child;
    bool endOfword;
    Node() {
        endOfword = false;
    }
};

class Trie {
    Node* root;
public:
    Trie() {
        root = new Node();
    }
    
    void insert(string key) {
        Node* temp = root;
        for(int i=0; i<key.size(); i++) {
            if(temp->child.count(key[i]) == 0) {
                temp->child[key[i]] = new Node();
            }
            temp = temp->child[key[i]];
        }
        temp->endOfword = true;
    }

    bool search(string key) {
        Node* temp = root;
        for(int i=0; i<key.size(); i++) {
            if(temp->child.count(key[i]) == 0) {
                return false;
            } else {
                temp = temp->child[key[i]];
            }
        }
        return temp->endOfword;
    }

    void longestHelper(Node* root, string &ans,string temp) {
        for(pair<char,Node*> child : root->child) {
            if(child.second->endOfword) {
                temp += child.first;

            if((temp.size() == ans.size() && temp < ans) || (temp.size() > ans.size())) {
                ans = temp;
            }
            longestHelper(child.second, ans, temp);
            temp = temp.substr(0, temp.size() - 1);
            }
        }
    }

    string longestStringwithEOW() {
        string ans = "";
        longestHelper(root, ans,"");
        return ans;
    }
};

string longestString(vector<string> dict) {
    Trie trie;

    for(int i=0; i< dict.size(); i++) {
        trie.insert(dict[i]);
    }

    return trie.longestStringwithEOW();
}  

int main() {
    vector<string> dict = {"a", "banana", "app","appl", "ap", "apply", "apple"};

    cout << longestString(dict) << endl;
    return 0;
}
