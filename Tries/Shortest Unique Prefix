// Shortest Unique Prefix
/*
words = {"zebra", "dog", "duck","dove"}
ans[] ={"z", "dog", "du", "dov"}
*/

#include<iostream>
#include<vector>
#include<string>
#include<unordered_map>
using namespace std;

class Node {
public:
    unordered_map<char, Node*> child;
    bool endOfword;
    int freq;
    Node() {
        endOfword = false;
    }
};

class Trie {
    Node* root;
public:
    Trie() {
        root = new Node();
        root->freq = -1;
    }
    
    void insert(string key) {
        Node* temp = root;
        for(int i=0; i<key.size(); i++) {
            if(temp->child.count(key[i]) == 0) {
                temp->child[key[i]] = new Node();
                temp->child[key[i]]->freq = 1;
            } else {
                temp->child[key[i]]->freq++;
            }
            temp = temp->child[key[i]];
        }
        temp->endOfword = true;
    }
    string getPrefix(string key) {
        Node* temp = root;
        string prefix ="";

        for(int i=0; i<key.size(); i++) {
            prefix += key[i];
            if(temp->child[key[i]]->freq == 1) {
                break;
            }
            temp = temp->child[key[i]];
        }
        return prefix;
    }
};

void prefixProb(vector<string> dict) {
    Trie trie;

    for(int i=0; i<dict.size(); i++) {
        trie.insert(dict[i]);
    }
    for(int i=0; i<dict.size(); i++) {
        cout << trie.getPrefix(dict[i]) << endl;
    }
}

int main() {
    vector<string> dict = {"zebra", "dog", "duck","dove"};
    prefixProb(dict);
    return 0;
}
