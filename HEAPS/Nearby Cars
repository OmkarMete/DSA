// Nearby Cars 
/*
Based on Car Locations (cx, cy), find nearest K cars.
CO (3, 3)
C1 (5, -1)
C2 (-2, 4)
Use simple math formula for find the distance B/W two point i.e d = sqrt((x2 - x1)^2 + (y2 - y1)^2)
*/

#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
using namespace std;

class Car {
public:
    int Idx;
    int distSq;

    Car(int Idx, int distSq) {
        this->Idx = Idx;
        this->distSq = distSq;
    }

    bool operator < (const Car &obj) const {
        return this->distSq > obj.distSq;
    }
};

void nearByCar(vector<pair<int,int>> pos,int K) {
    vector<Car> cars;

    for(int i=0; i<pos.size(); i++) {
        int distSq = (pos[i].first * pos[i].first ) + ( pos[i].second * pos[i].second );

        cars.push_back(Car(i,distSq));
    }

    priority_queue<Car> pq(cars.begin(),cars.end());

    for(int i=0; i<K; i++) {
        cout <<"Car " << pq.top().Idx << endl;
        pq.pop();
    }
}

int main() {
    vector<pair<int, int>> pos;
    pos.push_back(make_pair(3,3));                       
    pos.push_back(make_pair(5,-1));                       
    pos.push_back(make_pair(-2,4));                       

    int K = 2;
    
    nearByCar(pos,K);
    return 0;
}
