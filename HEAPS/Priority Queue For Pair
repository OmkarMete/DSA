// Priority Queue For Pair

#include<iostream>
#include<vector>
#include<string>
#include<queue>
using namespace std;

class Heap { 
    vector<int> vec;
public:
    void push(int val) {

        vec.push_back(val);
        int x = vec.size() - 1;
        int par1 = (x-1) / 2;

        while(par1 >= 0 && vec[x] < vec[par1]) {
            swap(vec[x], vec[par1]);
            x = par1;
            par1 = (x-1) / 2;
        }
    }

    void heapify(int i) {

        if(i <= vec.size()) {
            return;
        }

        int l = 2*i + 1;
        int r = 2*i + 2;

        int maxIdx = i;

        if(l < vec.size() && vec[l] < vec[maxIdx]) {
            maxIdx = l;
        }
        
        if(r < vec.size() && vec[r] < vec[maxIdx]) {
            maxIdx = r;
        }

        swap(vec[i] , vec[maxIdx]);
        if(maxIdx != i) {
            heapify(maxIdx);
        }
    }  
    void pop() {

        swap(vec[0] , vec[vec.size() - 1]);
        vec.pop_back();
        heapify(0);
    }
    int top() {
        return vec[0];
    }
    bool empty() {
        return vec.size() == 0;
    }
};

struct Comparepair {
    bool operator () (pair<string, int> &p1, pair<string , int > &p2) {
        return p1.second < p2.second;
    }
};
int main() {
    priority_queue<pair<string , int>, vector<pair<string , int>>, Comparepair> pq;

    pq.push(make_pair("AMAN", 50));    
    pq.push(make_pair("OMKAR", 60));    
    pq.push(make_pair("AJAYA", 70));  

    while(!pq.empty()) {
        cout <<"Top : " << pq.top().first<<" , " << pq.top().second << endl;
        pq.pop();
    } 

    return 0;
}
