// Priority Queue For Object

#include<iostream>
#include<vector>
#include<string>
#include<queue>
using namespace std;

class Heap { 
    vector<int> vec;
public:
    void push(int val) {

        vec.push_back(val);
        int x = vec.size() - 1;
        int par1 = (x-1) / 2;

        while(par1 >= 0 && vec[x] < vec[par1]) {
            swap(vec[x], vec[par1]);
            x = par1;
            par1 = (x-1) / 2;
        }
    }

    void heapify(int i) {

        if(i <= vec.size()) {
            return;
        }

        int l = 2*i + 1;
        int r = 2*i + 2;

        int maxIdx = i;

        if(l < vec.size() && vec[l] < vec[maxIdx]) {
            maxIdx = l;
        }
        
        if(r < vec.size() && vec[r] < vec[maxIdx]) {
            maxIdx = r;
        }

        swap(vec[i] , vec[maxIdx]);
        if(maxIdx != i) {
            heapify(maxIdx);
        }
    }  
    void pop() {

        swap(vec[0] , vec[vec.size() - 1]);
        vec.pop_back();
        heapify(0);
    }
    int top() {
        return vec[0];
    }
    bool empty() {
        return vec.size() == 0;
    }
};

class Student { 
public:
    string name;
    int marks;

    Student(string name , int marks) {
        this->name = name;
        this->marks = marks;
    }
    // Operator Overloading
    bool operator < (const Student &obj) const {
        return this->marks < obj.marks;
    }
    
};

int main() {
    priority_queue<Student> pq;

    pq.push(Student("AMAN", 50));    
    pq.push(Student("OMKAR", 60));    
    pq.push(Student("AJAYA", 70));  

    while(!pq.empty()) {
        cout <<"Top : " << pq.top().name <<" , " << pq.top().marks << endl;
        pq.pop();
    } 

    return 0;
}
