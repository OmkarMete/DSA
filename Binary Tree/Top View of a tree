// Top View of a tree 

#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;

class node {
public:
    int data;
    node* left;
    node* right;

    node(int data) {
        this->data = data;
        left = right = NULL;
    }
};

int height(node* root) {
    if (root == NULL) {
        return 0;
    }
    int leftHt = height(root->left);
    int rightHt = height(root->right);

    int currHt = max(leftHt, rightHt) + 1;
    return currHt;
}

static int idx = -1;

node* buildTree(vector<int>& nodes) {
    idx++;
    if (nodes[idx] == -1) {
        return NULL;
    }
    node* currNode = new node(nodes[idx]);
    currNode->left = buildTree(nodes);
    currNode->right = buildTree(nodes);

    return currNode;
}

void topView(node* root) {
    if (root == NULL) {
        return;
    }

    queue<pair<node*, int>> Q;
    map<int, int> m;
    Q.push(make_pair(root, 0));

    while (!Q.empty()) {
        pair<node*, int> curr = Q.front();
        Q.pop();

        node* currNode = curr.first;
        int currHD = curr.second;

        if (m.count(currHD) == 0) {
            m[currHD] = currNode->data;
        }

        if (currNode->left != NULL) {
            Q.push(make_pair(currNode->left, currHD - 1));
        }

        if (currNode->right != NULL) {
            Q.push(make_pair(currNode->right, currHD + 1));
        }
    }

    for (auto it : m) {
        cout << it.second << " ";
    }
    cout << endl;
}

int main() {
    vector<int> nodes = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
    node* root = buildTree(nodes);

    topView(root);
    return 0;
}
