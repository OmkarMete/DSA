// Delete a Node

#include<iostream>
#include<vector>
using namespace std;

class node {
public:
    int data;
    node* left;
    node* right;

    node(int data){
        this->data = data;
        left = right = NULL;
    }
};

node* insert(node* root, int val){
    if(root == NULL) {
        root = new node(val);
        return root;
    }
    if(val < root->data){
        root->left = insert(root->left , val);
    } else {
        root->right = insert(root->right , val);
    }
    return root;
}

void inorder(node* root) {
    if(root == NULL) {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

node* buildBST(int arr[], int n) {
    node* root = NULL;

    for(int i = 0; i < n; i++) {
        root = insert(root, arr[i]);
    }
    return root;
}

bool search(node* root, int key){
    if(root == NULL){
        return false;
    }
    if(root->data == key) {
        return true;
    }
    if(root->data > key) {
        return search(root->left, key);
    }
    else {
        return search(root->right, key);
    }
}

node* getInorderSuccessor(node* root) {
    while(root->left != NULL) {
        root = root->left;
    }
    return root;
}

node* deNode(node* root, int val) {
    if(root == NULL) {
        return NULL;
    }
    if(val < root->data) {
        root->left = deNode(root->left, val);
    } else if(val == root->data){
        if(root->left == NULL && root->right == NULL) {
            delete root;
            return NULL;
        }
        if(root->left == NULL || root->right == NULL) {
            node* temp = root->left ? root->left : root->right;
            delete root;
            return temp;
        }
        node* IS = getInorderSuccessor(root->right);
        root->data = IS->data;
        root->right = deNode(root->right, IS->data);
    } else {
        root->right = deNode(root->right, val);
    }
    return root;
}

int main() {
    int arr[9] = {8,5,3,1,4,6,10,11,14};
    node* root = buildBST(arr, 9);

    inorder(root);
    cout << endl;

    root = deNode(root,10);
    
    inorder(root);
    cout << endl;
    return 0;
}
