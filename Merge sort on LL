// Merge sort on LL 

#include<iostream>
using namespace std;

class node {
public:
    int data;
    node* next;

    node(int data) {
        this->data = data;
        next = NULL;
    }
};

class list {
public:
    node* head;
    node* tail;

    list() {
        head = NULL;
        tail = NULL;
    }

    void push_front(int val) {
        node* newNode = new node(val);
        if (head == NULL) {
            head = tail = newNode;
        } else {
            newNode->next = head;
            head = newNode;
        }
    }

    void push_back(int val){
        node* newNode = new node(val);
        if(head == NULL){
            head = tail = newNode;
        }else{
            tail->next = newNode;
            tail = newNode;
        }
    }

    void printList() {
        node* temp = head;
        while (temp != NULL) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

node* splitAtMid(node* head) {
    node* slow = head;
    node* fast = head;
    node* prev = NULL;

    while(fast != NULL && fast->next != NULL){
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }

    if(prev != NULL){
        prev->next = NULL;
    }
    return slow;
}

node* merge(node* left , node* right){
    list ans;
    node* i = left;
    node* j = right;

    while(i != NULL && j != NULL){
        if(i->data <= j->data){
            ans.push_back(i->data);
            i = i->next;
        }else{
            ans.push_back(j->data);
            j = j->next;
        }
    }
    while(i != NULL){
        ans.push_back(i->data);
        i = i->next;
    }

    while(j != NULL){
        ans.push_back(j->data);
        j = j->next;
    }
    return ans.head;
}

node* mergeSort(node* head){

    if(head == NULL || head->next == NULL){
        return head;
    }

    node* rightHead = splitAtMid(head);
    node* left = mergeSort(head);
    node* right = mergeSort(rightHead);
    return merge(left , right);
}

int main() {
    list l1;

    l1.push_front(1);
    l1.push_front(6);
    l1.push_front(4);
    l1.push_front(2);
    l1.push_front(3);
    l1.push_front(5);

    l1.printList();

    l1.head = mergeSort(l1.head);
    l1.printList();

    return 0;
}
