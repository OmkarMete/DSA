// Zig-Zag LL

#include<iostream>
using namespace std;

class node {
public:
    int data;
    node* next;

    node(int data) {
        this->data = data;
        next = NULL;
    }
};

class list {
public:
    node* head;
    node* tail;

    list() {
        head = NULL;
        tail = NULL;
    }

    void push_front(int val) {
        node* newNode = new node(val);
        if (head == NULL) {
            head = tail = newNode;
        } else {
            newNode->next = head;
            head = newNode;
        }
    }


    void printList() {
        node* temp = head;
        while (temp != NULL) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

node* splitAtMid(node* head) {
    node* slow = head;
    node* fast = head;
    node* prev = NULL;

    while(fast != NULL && fast->next != NULL){
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }

    if(prev != NULL){
        prev->next = NULL;
    }
    return slow;
}

node* rev(node* head){
    node* prev = NULL;
    node* curr = head;
    node* next = NULL;

    while(curr != NULL){
        next = curr->next;
        curr->next = prev;

        prev = curr;
        curr = next;
    }
    return prev;
}
node* zigZag(node* head){

   node* rightHead = splitAtMid(head);
   node* rightHeadRev = rev(rightHead);
   node* tail = rightHeadRev;

   node* left = head;
   node* right = rightHeadRev;

   while(left != NULL && right != NULL){
        node* nextLeft = left->next;
        node* nextRight = right->next;

        left->next = right;
        right->next = nextLeft;
        tail = right;
        left = nextLeft;
        right = nextRight;
   }

   if(right != NULL){
    tail->next = right; 
   }
   return head;
}

int main() {
    list l1;

    l1.push_front(6);
    l1.push_front(5);
    l1.push_front(4);
    l1.push_front(3);
    l1.push_front(2);
    l1.push_front(1);

    l1.printList();
    l1.head = zigZag(l1.head);
    l1.printList();
    return 0;
}
