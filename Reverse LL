// Reverse LL

#include<iostream>
using namespace  std;

class node{
public:
    int data;
    node* next;
    node(int val){
        data = val;
        next = NULL;
    }
};
class list {
    node* head;
    node* tail; 
public:
    list(){
        head = NULL;
        tail = NULL;
    }
    void push_front(int val){
        node* newNode = new node(val);
        if(head == NULL){
            head = tail = newNode;
        }else{
            newNode->next = head;
            head = newNode;
        }
    }
    void printList(){
        node* temp = head;
        while(temp != NULL){
            cout << temp->data <<" -> ";
            temp = temp->next;
        }
        cout <<"NULL\n";
    }
    void reverce(){
        node* curr = head;
        node* prev = NULL;
        while(curr != NULL){
            node* next = curr->next;
            curr->next = prev;

            prev = curr;
            curr = next;
        }
        head = prev;
    }
    
};
int main(){
    list l1;
    l1.push_front(3);
    l1.push_front(2);
    l1.push_front(1);
    l1.printList();

    l1.reverce();
    l1.printList();
    return 0;
}
