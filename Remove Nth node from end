// Find & remove Nth node from end 

#include<iostream>
using namespace  std;

class node{
public:
    int data;
    node* next;
    node(int val){
        data = val;
        next = NULL;
    }
};
class list {
    node* head;
    node* tail; 
public:
    list(){
        head = NULL;
        tail = NULL;
    }
    void push_front(int val){
        node* newNode = new node(val);
        if(head == NULL){
            head = tail = newNode;
        }else{
            newNode->next = head;
            head = newNode;
        }
    }
    void printList(){
        node* temp = head;
        while(temp != NULL){
            cout << temp->data <<" -> ";
            temp = temp->next;
        }
        cout <<"NULL\n";
    }
    int getSize(){
        int sz = 0;
        node* temp = head;
        while(temp != NULL){
            temp = temp->next;
            sz++;
        }
        return sz;
    }
    void removeNth(int n){
        int size = getSize();
         if (n > size || n <= 0) {
            cout << "Invalid position" << endl;
            return;
        }
        if (n == 1) {
            node* toDel = head;
            head = head->next;
            delete toDel;
            return;
        }
        node* prev = head;
        for(int i=1; i<(size-n); i++){
            prev = prev->next;
        }
        node* toDel = prev->next;
        cout <<"Going to delete : "<<toDel->data<<endl;
        prev->next = prev->next->next;
    }
    
};
int main(){
    list l1;
    l1.push_front(5);
    l1.push_front(4);
    l1.push_front(3);
    l1.push_front(2);
    l1.push_front(1);
    l1.printList();

    l1.removeNth(5);
    l1.printList();
    return 0;
}
