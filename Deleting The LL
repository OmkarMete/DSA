// Deleting The LL

#include<iostream>
using namespace  std;

class node{
public:
    int data;
    node* next;
    node(int val){
        data = val;
        next = NULL;
    }
    ~node(){
        cout <<"Node Destructor for data : " << data << endl;
        if(next != NULL){
            delete next;
            next = NULL;
        }
    }
};
class list {
    node* head;
    node* tail; 
public:
    list(){
        head = NULL;
        tail = NULL;
    }

    ~list(){
        cout <<"Destructor of list\n";
        if(head != NULL){
            delete head;
            head = NULL;
        }
    }

    void push_front(int val){
        node* newNode = new node(val);//// new = Memory Allocation
        if(head == NULL){
            head = tail = newNode;
        }else{
            newNode->next = head;
            head = newNode;
        }
    }

    void push_back(int val){
        node* newNode = new node(val);
        if(head == NULL){
            head = tail = newNode;
        }else{
            tail->next = newNode;
            tail = newNode;
        }
    }
    void printList(){
        node* temp = head;
        while(temp != NULL){
            cout << temp->data <<" -> ";
            temp = temp->next;
        }
        cout <<"NULL\n";
    }
    void insert(int val, int pos){
        node* newNode = new node(val);
        node* temp = head;
        for(int i=0; i<pos-1; i++){
            if(temp == NULL){
                cout <<"Position is INVALID\n";
                return;
            }
            temp = temp->next;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
};
int main(){
    list l1;
    l1.push_front(3);
    l1.push_front(2);
    l1.push_front(1);
    l1.insert(100,5);
    l1.printList();
    return 0;
}
